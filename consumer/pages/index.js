import {default as axios, default as Axios} from 'axios';
import Head from 'next/head';
import Pusher from "pusher-js";
import React, {useContext, useEffect, useRef, useState} from 'react';
import {useForm} from "react-hook-form";
import AuthContext from "../contexts/auth";
import getConfig from 'next/config'
import {useLocation} from "../hooks/useLocation";
import {toast, ToastContainer} from "react-toastify";

export default function Home() {
    const {publicRuntimeConfig: config} = getConfig()
    const [messages, setMessages] = useState([])
    const userRef = useRef()
    const {register, handleSubmit, watch, formState: {errors}} = useForm();
    const {login} = useContext(AuthContext)
    const {position, positionError} = useLocation()
    const onSubmit = async (data) => {

        const {email, password} = data
        if (positionError instanceof GeolocationPositionError) {

            toast('For the service please enable location.', {
                toastId: 'locationDeniedPermissionToast',
                pauseOnFocusLoss: false,
                type: "warning"
            })
            return false

        }
        const {coords: {latitude, longitude}} = position

        data['coords'] = {"latitude": latitude, "longitude": longitude}
        login(data)
        await axios
            .post(`${config.hostAuthUrl}/consumer/login`, data)
            .then(response => {
                console.log(response.data)
            })
            .catch(error => {
                alert(error?.response?.data[1]?.message)
                console.log(error?.response?.data[1]?.message)
            })
    }

    async function handleSendMessage(e) {
        e.preventDefault()
        const user = userRef.current.value
        await axios.post(`${config.hostApiUrl}/post-message`, {user}).then(response => {

        }).catch(error => {
            console.log(error)
        })
    }

    useEffect(() => {
        const pusher = new Pusher('a1091d9e1a6ed6652372', {
            cluster: 'us3',
            encrypted: true
        })
        const channel = pusher.subscribe('public.room');

        channel.bind('message.new', (data) => {
            console.log(data)
            setMessages(oldMessages => [...oldMessages, data])
        })
        return () => {
            pusher.unsubscribe('public.room')
        }
    }, []);

    return (
        <>

            <Head>
                <title>Consumer Login</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <div className={`flex justify-center items-center w-full h-screen bg-slate-200`}>
                <div className="w-full max-w-xs ">
                    {Object.keys(errors).length > 0 &&
                        <ul>
                            {errors.email &&
                                <li><p className={`text-red-500 text-lg`}>email field is required</p></li>}
                            {errors.password &&
                                <li><p className={`text-red-500 text-lg`}>password field is required</p></li>}
                        </ul>
                    }

                    <form className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4" onSubmit={handleSubmit(onSubmit)}>

                        <div className="mb-4">
                            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="email">
                                Email
                            </label>
                            <input
                                defaultValue="" {...register("email", {required: true})}
                                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                id="email" type="email" placeholder="email"
                            />
                        </div>
                        <div className="mb-6">
                            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="password">
                                Password
                            </label>
                            <input
                                defaultValue="" {...register("password", {required: true})}
                                className="shadow appearance-none border  rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline"
                                id="password" type="password" placeholder="******************"
                            />
                        </div>
                        <div className="flex items-center justify-between">
                            <input
                                className="cursor-pointer bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg  focus:outline-none focus:shadow-outline"
                                type="submit"
                            />
                            {/*<a className="inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800"
                           href="#">
                            Forgot Password?
                        </a>*/}
                        </div>
                    </form>
                </div>
            </div>
        </>
    )
}
